<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice-Enabled Website</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css"
        integrity="sha384-r4NyP46KrjDleawBgD5tp8Y7UzmLA05oM1iAEQ17CSuDqnUK2+k9luXQOfXJCJ4I" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/annyang@2.6.1/dist/annyang.min.js"></script>
</head>

<body class="d-flex flex-column vh-100">
    <%- include('../partials/navbar') %>
    <main class="container mt-5">
        <%- body %>
    </main>
    <script>
        // Speak Function for Voice Feedback
        function speak(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            const voices = window.speechSynthesis.getVoices();
            utterance.voice = voices.find(voice => voice.lang === 'en-US') || voices[0];
            utterance.pitch = 1;
            utterance.rate = 1;
            window.speechSynthesis.speak(utterance);
        }

        // Helper function to parse the spoken date into YYYY-MM-DD format
        function parseDate(spokenDate) {
            try {
                const date = new Date(spokenDate); // Let the browser parse the date
                if (!isNaN(date)) {
                    // Format the date as YYYY-MM-DD
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
                    const day = String(date.getDate()).padStart(2, '0');
                    return `${year}-${month}-${day}`;
                } else {
                    return null; // Invalid date
                }
            } catch (error) {
                return null; // Fallback for parsing errors
            }
        }

        // Initialize Annyang and Commands
        if (annyang) {
            console.log("Annyang is supported");

            // Station and Class Mapping
            const stationMapping = {
                'bhopal': 'BHOPAL JN',
                'indore': 'INDORE JN',
                'jabalpur': 'JABALPUR JN',
                'itarsi': 'ITARSI JN',
                'khandwa': 'KHANDWA JN',
                'ujjain': 'UJJAIN JN',
                'ratlam': 'RATLAM JN',
                'bina': 'BINA JN',
                'katni': 'KATNI JN',
                'hoshangabad': 'HOSHANGABAD JN',
                'sehore': 'SEHORE JN',
                'burhanpur': 'BURHANPUR JN',
                'mandideep': 'MANDIDEEP',
                'dewas': 'DEWAS JN',
                'sagar': 'SAGAR JN',
                'chhatarpur': 'CHHATARPUR JN',
                'tikamgarh': 'TIKAMGARH JN',
                'damoh': 'DAMOH JN',
                'satna': 'SATNA JN',
                'rewa': 'REWA JN',
                'vidisha': 'VIDISHA JN',
                'khajuraho': 'KHAJURAHO JN',
                'neemuch': 'NEEMUCH JN',
                'morena': 'MORENA JN',
                // Add more as needed from mp.js
            };
            const classMapping = {
                'first AC': '1A',
                'second AC': '2A',
                'third AC': '3A',
                'sleeper': 'SL',
                'chair car': 'CC',
                'all classes': ''
            };

            // Navigation Commands
            const navigationCommands = {
                'go to home': () => {
                    window.location.href = '/';
                },
                'go to booking': () => {
                    window.location.href = '/book';
                },
                'go to login': () => {
                    window.location.href = '/login';
                },
                'go to register': () => {
                    window.location.href = '/register';
                },
                'logout': () => {
                    window.location.href = '/logout';console.log("Annyang is supported");
console.log("Station and Class Mapping initialized");
console.log("Navigation Commands initialized");
console.log("Login Commands initialized");
console.log("Registration Commands initialized");
console.log("Booking Commands initialized");
console.log("All Commands added to Annyang");
console.log("Annyang started listening");
console.log("On Page Load, Instructions provided");

annyang.addCallback('result', (userSaid, commandText, languages) => {
    console.log("User said:", userSaid);
    console.log("Command Text:", commandText);
    console.log("Languages:", languages);
});

annyang.addCallback('error', (error) => {
    console.error("Annyang error:", error);
});

annyang.addCallback('start', () => {
    console.log("Annyang started listening");
});

annyang.addCallback('end', () => {
    console.log("Annyang stopped listening");
});

annyang.addCallback('soundstart', () => {
    console.log("Sound started playing");
});

annyang.addCallback('soundend', () => {
    console.log("Sound stopped playing");
});

annyang.addCallback('resultMatch', (commandText, languages, phrases) => {
    console.log("Result Match:", commandText, languages, phrases);
});

annyang.addCallback('resultNoMatch', (userSaid, languages) => {
    console.log("Result No Match:", userSaid, languages);
});
                }
            };

            // Login Commands
            const loginCommands = {
                'Login name is *n': (n) => {
                    const username = name.toLowerCase();
        document.getElementById('username').value = username;
                    speak(`Username set to ${n}. What's the password?`);
                },
                'My password is *p': (p) => {
                    document.getElementById('password').value = p;
                    speak('Password set. You can now submit the form.');
                },
                'Login': () => {
                    document.getElementById('loginForm').submit();
                    speak('You are logged in successfully.');
                }
            };

            // Registration Commands
            const registerCommands = {
                'set username to *name': (name) => {
                    document.getElementById('username').value = name;
                    speak(`Username set to ${name}.`);
                },
                'set email to *email': (email) => {
                    document.getElementById('email').value = email;
                    speak(`Email set to ${email}.`);
                },
                'set password to *password': (password) => {
                    document.getElementById('password').value = password;
                    speak(`Password set to ${password}.`);
                },
                'submit registration form': () => {
                    document.getElementById('registerForm').submit();
                    speak('Registration form submitted.');
                }
            };

            // Booking Commands
            const bookingCommands = {
                'set from station to *fromStation': (fromStation) => {
                    const standardizedFrom = stationMapping[fromStation.toLowerCase()];
                    if (standardizedFrom) {
                        document.getElementById('from').value = standardizedFrom;
                        speak(`From station set to ${standardizedFrom}.`);
                    } else {
                        speak(`I did not recognize the station "${fromStation}". Please specify again.`);
                    }
                },
                'set destination to *toStation': (toStation) => {
                    const standardizedTo = stationMapping[toStation.toLowerCase()];
                    if (standardizedTo) {
                        document.getElementById('to').value = standardizedTo;
                        speak(`To station set to ${standardizedTo}.`);
                    } else {
                        speak(`I did not recognize the station "${toStation}". Please specify again.`);
                    }
                },
                'set date to *date': (date) => {
                    const parsedDate = parseDate(date);
                    if (parsedDate) {
                        document.getElementById('date').value = parsedDate;
                        speak(`Date set to ${parsedDate}.`);
                    } else {
                        speak(`Sorry, I couldn't recognize the date "${date}". Please try again.`);
                    }
                },
                'set class preference to *preference': (preference) => {
                    const standardizedClass = classMapping[preference.toLowerCase()] || '';
                    document.getElementById('preference').value = standardizedClass;
                    speak(`Class preference set to ${preference}.`);
                },
                'submit booking form': () => {
                    document.querySelector('form').submit();
                    speak('Booking form submitted.');
                }
            };

            // Add All Commands
            annyang.addCommands(navigationCommands);
            annyang.addCommands(loginCommands);
            annyang.addCommands(registerCommands);
            annyang.addCommands(bookingCommands);

            // Start Listening
            annyang.start();

            // On Page Load, Provide Instructions
            window.onload = () => {
                const path = window.location.pathname;
                if (path === '/login') {
                    speak("Login page loaded. What is your login name?");
                } else if (path === '/register') {
                    speak("Registration page loaded. What is your username?");
                } else if (path === '/book') {
                    speak("Booking page loaded. Please provide the required details.");
                }
            };
        } else {
            console.error('Annyang is not supported in this browser.');
        }
    </script>
</body>

</html>
